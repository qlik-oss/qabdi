apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "licenses.fullname" . }}
  labels:
    app: {{ template "licenses.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    {{- if .Values.tracing.enabled }}
    sidecar.jaegertracing.io/inject: "true"
    {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
      labels:
        app: {{ template "licenses.name" . }}
        release: {{ .Release.Name }}
        {{ tpl ( .Values.nats.podLabel.key ) . }}: {{ .Values.nats.podLabel.value | quote }}
    spec:
      serviceAccountName: {{ template "licenses.fullname" . }}
      containers:
        - name: "election"
          image: {{ template "leader-elector.image" . }}
          args:
            - --election={{ template "licenses.fullname" . }}
            - --election-namespace={{ .Release.Namespace }}
            - --http=0.0.0.0:4040
          ports:
            - containerPort: 4040
          livenessProbe:
            httpGet:
              path: /health
              port: 4040
          resources:
{{ toYaml .Values.electionResources | indent 12 }}
        - name: {{ .Chart.Name }}
          image: {{ template "licenses.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.port }}
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ .Values.service.port }}
          {{- if .Values.resources }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          {{- end }}
          env:
            - name: ENVIRONMENT
              value: "{{ .Values.environment }}"
            {{- if .Values.proxy.uri }}
            - name: PROXY_URI
              value: "{{ .Values.proxy.uri }}"
            - name: PROXY_AUTH_MODE
              value: "{{ .Values.proxy.authMode }}"
            - name: PROXY_USER
              value: "{{ .Values.proxy.user }}"
            - name: PROXY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-proxyconfig
                  key: proxy-password
            - name: PROXY_DOMAIN
              value: "{{ .Values.proxy.domain }}"
            {{- end }}
            - name: LICENSES_SERIAL_NBR
              value: "{{ .Values.serial.number }}"
            - name: LICENSES_CONTROL_NBR
              value: "{{ .Values.control.number }}"
            - name: LICENSE_KEY
              value: "{{ .Values.license.key }}"
            - name: TENANT_ID
              value: {{ .Values.tenant.id }}
            - name: LICENSES_LOG_LEVEL
              value: {{ .Values.log.level }}
            - name: LICENSES_TRACING_ENABLED
              value: {{ .Values.tracing.enabled | quote }}
            - name: LICENSES_TEST_MODE
              value: "{{ .Values.testmode.enabled }}"
            - name: IS_QCS
              value: "{{ .Values.qcs.enabled }}"
            - name: JWKS_ENDPOINT
              value: {{ default (printf "http://%s-keys:8080/v1/keys/qlik.api.internal" .Release.Name ) .Values.jwks.uri | quote }}
              {{- if .Values.pds.enabled }}
            - name: PDS_URI
              value: {{ default (printf "http://%s-policy-decisions:5080" .Release.Name ) .Values.pds.uri | quote }}
              {{- end }}
            - name: LICENSES_FEATURES_URI
              value: {{ default (printf "http://%s-feature-flags:8080/v1/features" .Release.Name ) .Values.features.uri | quote }}
            - name: LICENSES_FEATURES_CACHE
              value: "{{ .Values.features.cache.enabled }}"
            {{- if not .Values.abdi }}
            - name: LICENSES_MONGODB_URI
              valueFrom:
                secretKeyRef:
                  {{ if .Values.mongodb.uriSecretName -}}
                  name: {{ .Values.mongodb.uriSecretName }}
                  {{ else -}}
                  name: {{ .Release.Name }}-mongoconfig
                  {{ end -}}
                  key: mongodb-uri
            {{- end}}
            - name: ASS_SYNC_ENABLED
              value: "{{ .Values.assignments.sync.enabled }}"
            - name: EXCESS_ENABLED
              value: "{{ .Values.assignments.excess.enabled }}"
            - name: NATS_ENABLED
              value: {{ .Values.nats.enabled | quote }}
            - name: NATS_SERVERS
              value: {{ (tpl .Values.nats.servers .) | quote }}
            - name: NATS_CLUSTER
              value: {{ default (printf "%s-nats-streaming-cluster" .Release.Name ) .Values.nats.clusterName | quote }}
            - name: NATS_CONNECT_ATTEMPTS
              value: {{ int $.Values.nats.connectAttempts | quote }}
            {{- if .Values.tokenAuth.enabled }}
            - name: TOKEN_AUTH_ENABLED
              value: {{ .Values.tokenAuth.enabled | quote }}
            - name: TOKEN_AUTH_PRIVATE_KEY
              value: {{ .Values.tokenAuth.privateKey | quote }}
            - name: TOKEN_AUTH_KID
              value: {{ .Values.tokenAuth.kid | quote }}
            - name: TOKEN_AUTH_URL
              value: {{  tpl ( .Values.tokenAuth.url ) . | quote }}
            - name: SQS_ENABLED
              value: {{ .Values.sqs.enabled | quote }}
            - name: SQS_QUEUE_URI
              value: {{ .Values.sqs.queueUri | quote }}
            - name: AWS_REGION
              value: {{ .Values.sqs.awsRegion | quote }}
            {{- end }}
            {{- if .Values.offline  }}{{- if .Values.offline.enabled  }}
            - name: OFFLINE
              value: "{{ .Values.offline.enabled }}"
            {{- end }}{{- end}}
            {{- if .Values.rollbar.enabled }}
            - name: ROLLBAR_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-rollbarconfig
                  key: rollbar-token
            {{- end }}
            {{- if .Values.useStageBackend }}
            - name: STAGE
              value: "{{ .Values.useStageBackend }}"
            {{- end}}
            {{- if .Values.abdi }}
            - name: ABDI_MODE
              value: {{ .Values.abdi | quote }}
            {{- end }} 
{{- if .Values.global  }}{{- if .Values.global.certs  }}{{- if .Values.global.certs.enabled  }}
          volumeMounts:
{{- include "qlik.ca-certificates.volumeMount" . | nindent 12 }}
{{- end }}{{- end }}{{- end }}
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
{{- end }}
{{- if .Values.dnsConfig }}
      dnsConfig:
{{ toYaml .Values.dnsConfig | indent 8 }}
{{- end }}
{{- if .Values.global  }}{{- if .Values.global.certs  }}{{- if .Values.global.certs.enabled  }}
      volumes:
{{- include "qlik.ca-certificates.volume" . | nindent 8 }}
{{- end }}{{- end }}{{- end }}
  selector:
    matchLabels:
      app: {{ template "licenses.name" . }}
      release: {{ .Release.Name }}
