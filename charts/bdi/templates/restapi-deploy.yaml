apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "bdi.restapi.fullname" . }}
  labels:
    app: {{ template "bdi.restapi.fullname" . }}
    chart: {{ template "bdi.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.restapi.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "bdi.restapi.fullname" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "bdi.restapi.fullname" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/cluster-cm.yaml") . | sha256sum }}
      {{- if .Values.restapi.annotations }}
{{ toYaml .Values.restapi.annotations | indent 8 }}
      {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      {{- if .Values.restapi.additionalAffinities }}
      affinity:
{{ toYaml .Values.restapi.additionalAffinities | indent 8 }}
      {{- end }}
      {{- with .Values.restapi.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
      tolerations:
{{ toYaml .Values.restapi.tolerations | indent 8 }}
      containers:
        - name: {{ template "bdi.restapi.fullname" . }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/home/ubuntu/dist/rest_service/abdi_rest_service"]
          args: [
{{- if not (.Values.autostartServices) }}
            "-a", "0.0.0.0",
            "-p", "8080",
            "-r", "/home/ubuntu/dist",
            "-c", "/config/cluster/cluster.json",
            "-s", "/config/indexing/indexing_setting.json",
{{- end }}
            {{- if .Values.restapi.tls.enabled }}
            "--cert_file", "/home/ubuntu/tls/tls.cert",
            "--key_file", "/home/ubuntu/tls/tls.key",
            {{- end }}
            "-l", "{{ .Values.acceptLicense }}"
          ]
          env:
            - name: ACCEPT_QULA
              value: {{ .Values.acceptLicense | quote }}
            - name: BDI_CHART_VERSION
              value: {{ .Chart.Version | quote }}
            - name: BDI_PRODUCT_VERSION
              value: {{ .Chart.AppVersion | quote }}
            {{- if .Values.sourcecloudgw.enabled }}
            - name: SOURCE_GW_KEY
              value: {{ .Values.sourcecloudgw.accessKey | quote }}
            - name: SOURCE_GW_SECRET
              value: {{ .Values.sourcecloudgw.secretKey | quote }}
            {{- end }}
            {{- if .Values.outputcloudgw.enabled }}
            - name: OUTPUT_GW_KEY
              value: {{ .Values.outputcloudgw.accessKey | quote }}
            - name: OUTPUT_GW_SECRET
              value: {{ .Values.outputcloudgw.secretKey | quote }}
            - name: BDI_OUTPUT_CLOUD_SYNC_ENABLED
              value: "true"
            {{- end }}
            {{- if .Values.brokerservice.enabled }}
            - name: BDI_SOURCE_DATA_CLOUD_SYNC_ENABLED
              value: "true"
            {{- end }}
            - name: ENABLE_CRASH_DUMP
              value: {{ .Values.enableCrashDumpUpload | quote }}
{{- if .Values.autostartServices }}
            - name: KUBERNETES_MODE
              value: "true"
            - name: REGISTRY_URI
              value: "{{ template "bdi.registry.fullname" . }}:55057"
            - name: OUTPUT_ROOT_PATH
              value: "{{ .Values.output.path }}"
            - name: SOURCEDATA_PATH
              value: "{{ .Values.data.path }}"
            - name: SOURCEDATA_CLOUD_PATH
              value: ""
            - name: DATASET_NAME
              value: "{{ .Values.data.name }}"
{{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          securityContext:
            privileged: {{ .Values.image.privileged }}
            {{- if .Values.enableCrashDumpUpload }}
            capabilities:
              add:
                - SYS_PTRACE
            {{- end }}
          resources:
{{ toYaml .Values.restapi.resources | indent 12 }}
          volumeMounts:
{{- if not (.Values.autostartServices) }}
            - mountPath: /config/cluster
              name: cluster-cm
            - mountPath: /config/indexing
              name: settings
{{- end }}
            - mountPath: {{ .Values.data.path }}
              name: data-pv
            - mountPath: {{ .Values.output.path }}
              name: output-pv
            {{- if .Values.cache.enabled }}
            - mountPath: {{ .Values.cache.path }}
              name: cache-pv
            {{- end }}
            {{- if .Values.restapi.tls.enabled }}
            - mountPath: /home/ubuntu/tls
              name: tls
              readOnly: true
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 30
{{- if not (.Values.autostartServices) }}
      initContainers:
        - name: init
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ['sh', '-c']
          args:
            - |
              settings="/config/indexing/indexing_setting.json";
              if [ ! -f $settings ]; then
                cp /home/ubuntu/dist/runtime/config/indexing_setting.json /config/indexing/
              fi

              $data = $(jq '.source_data_path' $settings)
              if [ -z $data ]; then
                tmp=$(mktemp)
                jq '.source_data_path = "{{ .Values.data.path }}"' $settings > "$tmp" && mv "$tmp" "$settings"
              fi

              $output = $(jq '.output_root_folder' $settings)
              if [ -z $output ]; then
                tmp=$(mktemp)
                jq '.output_root_folder = "{{ .Values.output.path }}"' $settings > "$tmp" && mv "$tmp" "$settings"
              fi

              $cache = $(jq '.qsl_worker_indexlet_cache_path' $settings)
              if [ -z $cache ]; then
                tmp=$(mktemp)
                jq '.qsl_worker_indexlet_cache_path = "/home/cache/indexlet"' $settings > "$tmp" && mv "$tmp" "$settings"
              fi
          volumeMounts:
            - mountPath: /config/indexing
              name: settings
{{- end }}
      volumes:
{{- if not (.Values.autostartServices) }}
        - name: cluster-cm
          configMap:
            name: {{ template "bdi.cluster.fullname" . }}
        - name: settings
          hostPath:
            path: /tmp/bdi
{{- end }}
        {{- if .Values.data.persistence.enabled }}
        - name: data-pv
          persistentVolumeClaim:
            claimName: {{ .Values.data.persistence.existingClaim | default (include "bdi.data.fullname" .) }}
        {{ else }}
        - name: data-pv
          hostPath:
            path: {{ .Values.data.persistence.folder }}
        {{- end }}
        {{- if .Values.output.persistence.enabled }}
        - name: output-pv
          persistentVolumeClaim:
            claimName: {{ .Values.output.persistence.existingClaim | default (include "bdi.output.fullname" .) }}
        {{ else }}
        - name: output-pv
          hostPath:
            path: {{ .Values.output.persistence.folder }}
        {{- end }}
        {{- if .Values.cache.enabled }}
        - name: cache-pv
          hostPath:
            path: {{ .Values.cache.folder }}
        {{- end }}
        {{- if .Values.restapi.tls.enabled }}
        - name: tls
          secret:
            secretName: {{ template "bdi.restapi.fullname" . }}
            defaultMode: 0400
            items:
              - key: certificate
                path: tls.cert
              - key: key
                path: tls.key
        {{- end }}
